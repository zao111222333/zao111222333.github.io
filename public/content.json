{"pages":[],"posts":[{"title":"Photolithography: One Lesson of SME308 (SUSTech)","text":"YouTube: TO-DO Bilibili: TO-DO View 光刻胶 光刻1 2","link":"/Blogs/Photolithography/"},{"title":"A Parallel Optimization Design for Demosaicing","text":"SummaryVerilog，Modelsim, Quarus II, FPGA 使⽤ FPGA 实现去⻢赛克&amp;中值滤波的硬件结构，使⽤ wujian100 作为控制模块 增加并⾏去⻢赛克模块节约了 40%的 Liner-Buffer（相较传统架构） This article is also available in 简体中文. Background Bilinear是比较常见的Demosaicing算法。当我们先做Demosaicing再做中值滤波时，由于rwa2rgb过程会使数据信息密度降低(10bit raw -&gt; 3*8bit rgb)，采用3组Demosaicing算子并行运算可以减少40% Liner-Buffer使用。 Main IdeaLiner-Buffer Architecture通过6组同步RAM实现5组异步Line-Buffer Demosaicing Architecture 使用5x3的Demosaicing-Mask，将其拆分为3个3x3的Mask(数据复用的思想)分别输入到3个并行的Demosaicing模块中。 输出的3个rgb数据分别进入中值滤波器中，与相邻时钟进入的数据一起进行3x3的中值滤波。 Implementation of RISC-V CPU 本次project我们使用集成了RISC-V CPU的SoC(wujian100\b)进行模块控制 Overview &amp; Pipeline 加入pipeline设计，用少量的buffer的代价实现低能耗 OutcomeComparation of Line-Buffer size between Tradition and Parallel algorithm Line-Buffer size Tradition Parallel Demosacing 4 of 10bit*W 4 of 10bit*W Median Filter 2 of 30bit*W 2 of 10bit*W Totally 100bit*W 60bit*W 新的设计节约了40%的寄存器开销","link":"/Projects/A-Parallel-Optimization-Design-for-Demosaicing&RISC-V-CPU-on-FPGA/"},{"title":"Muti-Pipeline Design of Systolic Array","text":"SummarySpinalHDL, Synopsys-DC, Yosys, PTPX 以低精度混合运算为前提的 Pipeline 及脉动⾏为设计 与脉动数据流解耦合的多级可变 Pipeline 设计 Background 脉动阵列的Psum长度会随着多次累加的长度而上升（对数上升），其使得加法器的一个input及output长度的增加，Logic-Level（延时）增加 Main IdeaSystolic-Cell Architecture Pipeline Architecture使用可变pipeline设计，分阶段执行乘加运算，此方案与传统脉动设计有较明显差别。 Systolic-Array Architecture 增设了pipeline的脉动阵列的输入&amp;控制行为与传统脉动 阵列相同。由于增设了pipeline，输出数 据为多段数据，相邻数据段 相隔1clk延迟输出。 Accelerator Architecture TPU架构(GEMM加速器)，采用先脉动再移位的思想。在加速器层次进行多精度可重构设计。每层阵列的精度为2bit*2bit，共16层阵列。可支持2-8bit混合精度数据进行矩阵乘法计算。阵列模块后接累加模块&amp;移位模块。累加也采用pipeline加法。 OutcomeTo be continue..","link":"/Projects/Muti-Pipeline-Design-of-Systolic-Array/"},{"title":"Redesigned Eyeriss with Pipeline Implementation","text":"SummaryVerilog, Chisel3, Quarus II 在原有架构基础上引⼊ PE 内部 Pipeline 和并⾏乘加模块 BackgroundEyeriss是MIT于2016年提出的CNN加速器，其核心在于尽可能多的数据复用。本project以学习的目的复现了Eyeriss的基本功能，学习Chisel3的基本使用方法。 Main IdeaPE-Cell Architecture 考虑到实际情况中kernel size普遍在7及以下，此设计与论文中PE-Cell的实现略有不同。\b\b本设计使用7个MAC并行计算，由于乘/加间有Reg.其PE-Cell有内部的pipeline。 得到以上仿真结果 PE-Array Architecture Eyeriss独特的地方也在于2d-conv的实现上，每个PE可以独立完成1d-conv，PE-Array使用横行+斜线的方式输入数据实现2d-conv。 以上是我们提出的基于Eyeriss的由于Psum只在PE-Column内部流动，Columns之间的控制是解耦合的。从而有机会把PE内部的Pipeline在整个Columns上实现。 Simulation OutcomeStart First Calculation： counter=0x227Start Second Calculation: counter=0x39B Time cost for one calculation: T=0x39B-0x227=0x174=372 cyclesAmount of operation for one calculation(100% util rate): M=12x14x32x7x(12-7)x2=376320（12x14 Array，fmap=12, kernel=7)Calculation force (100% util rate, 200MHz): N=M*f/T≈202 Gflops","link":"/Projects/Redesigned-Eyeriss-with-Pipeline-Implementation/"},{"title":"conference&#x2F;DATE&#39;22: An Essay was Accepeted","text":"","link":"/News/Publications-Conference-ASP-DAC'22/"},{"title":"An Energy-Efﬁcient Bit-Split-and-Combination Systolic Accelerator for NAS-Based Multi-Precision Convolution Neural Networks","text":"SummaryTo be published","link":"/Publications/Conference-ASP-DAC'22/"},{"title":"Bulid Your Online SpinalHDL Development Environment","text":"Github: https://github.com/zao111222333/spinalhdl-online Dockhub: https://hub.docker.com/r/zao111222333/spinalhdl-online Demohttps://spinalhdl-online.junzhuo.me with PASSWORD=123456. Run these two lines in TERMINAL: 12cd /SpinalHDL/SpinalTemplateSbt/sbt &quot;runMain mylib.MyTopLevelSim&quot; And the output files (RTL, Waveform) will located at SpinalTemplateSbt/simWorkspace/MyTopLevel. Version Info. Pakages Version Repositories Debian 10-slim mirrors.163.com/debian SpinalHDL 1.6.0 Java jdk8u311 Scala 2.11.12 Sbt 1.4.7 maven.aliyun.com Verilator 4.010 OpenSSH 7.9p1 Code Server 3.12.0 UsagePull Imgae &amp; Run Container123456789docker run -itd \\ --restart=always \\ -p 8848:8080 \\ -p 2222:22 \\ -e USER=username \\ -e PASSWORD=123456 \\ -e WORKDIR=/SpinalHDL/ \\ -v ~/SpinalHDL-Share/:/SpinalHDL/ \\ zao111222333/spinalhdl-online Use ItSpinalHDL-Online websit will be accessible on 8848 port of host, access http://localhost:8848 with PASSWORD=123456. You can also use ssh for further functions (remote control, files transmisson), via ssh -p 2222 username@localhost with PASSWORD=123456. You can also change PORT/USER/PASSWORD/etc, see here. Further Info.Definitions of Configures Configure Describe -p 8848:8080 spinalhdl-online will be accessible on 8848 port of Host, http://localhost:8848 -p 2222:22 ssh-server will be accessible on 2222 port of Host, ssh -p 2222 username@localhost -e USER=username The USER’s name in Docker (debian10) -e PASSWORD=123456 The PASSWORD for both spinalhdl-online’s Login and USER -e WORKDIR=/SpinalHDL/ The spinalhdl-online’s defualt launch directory -v ~/SpinalHDL-Share/:/SpinalHDL/ Share directory between Host and Docker. ~/SpinalHDL-Share/ (in Host) will share the contents within /SpinalHDL/ (in Docker) Modify the Highlight-Configures according to your situation. VS Code Extension Extension Version Describe Scala Syntax (official) 0.5.4 Visual Studio Code extension providing syntax highlighting for Scala 2 and Scala 3 source files. Scala (Metals) 1.10.10 Metals extension for Visual Studio Code. Bracket Pair Colorizer 0.2.1 A customizable extension for colorizing matching brackets. Verilog-HDL 1.5.0 Verilog-HDL, SystemVerilog and Bluespec SystemVerilog support for VS Code with Syntax Highlighting, Snippets, Linting and much more! dev: Bulid It YouselfClone SourceDownload .zip file from my websitehttps://junzhuo.me/download/SpinalHDL-Online.zip Clone Source[IMPORTANT] Install Git-LFS to clone large files. 1git lfs clone https://github.com/zao111222333/spinalhdl-online.git Bulid Imgae12345678# The next operation need to execute at root-path/# root-path/---src/# |---docker-entrypoint.sh# |---Dockerfile# |---README.md# |---.gitattributesdocker build --network=host -t spinalhdl-online . Run Container123456789docker run -itd \\ --restart=always \\ -p 8848:8080 \\ -p 2222:22 \\ -e USER=username \\ -e PASSWORD=123456 \\ -e WORKDIR=/SpinalHDL/ \\ -v ~/SpinalHDL-Share/:/SpinalHDL/ \\ spinalhdl-online","link":"/Blogs/SpinalHDL-Online/"},{"title":"IPMI-Fan","text":"IPMITOOLhttps://www.licc.tech/article?id=33 123456789101112MyIP=192.168.2.229MyUSER=ADMINMyPASSWD=ADMIN#Set Full Speed Mode to Avoid Auto-Reset Speedipmitool -H ${MyIP} -U ${MyUSER} -P ${MyPASSWD} raw 0x30 0x45 0x01 0x01#Set Fan Speed for FAN1, FAN2, ...ipmitool -H ${MyIP} -U ${MyUSER} -P ${MyPASSWD} raw 0x30 0x70 0x66 0x01 0x00 0x30#Set Fan Speed for FANA, FANB, ...ipmitool -H ${MyIP} -U ${MyUSER} -P ${MyPASSWD} raw 0x30 0x70 0x66 0x01 0x01 0x30# Set Power-Onipmitool -H ${MyIP} -U ${MyUSER} -P ${MyPASSWD} chassis power on","link":"/Blogs/IPMI-Fan/"},{"title":"iSCSI","text":"IPMITOOLhttps://www.server-world.info/en/note?os=Debian_11&amp;p=iscsi&amp;f=3 iscsiadm -m node -T iqn.2005-10.org.freenas.ctl:dockerhost -p 192.168.107.3 –op update -n node.startup -v automatic vim /etc/fstab/dev/sdb1 /Docker ext4 _netdev 0 0 在clash config文件的rule内容中，加入以下： 123- DOMAIN-SUFFIX,junzhuo.site,🎯 全球直连（或者）- DOMAIN-SUFFIX,junzhuo.site,DIRECT 相当于对于*junzhuo.site,不会进行代理","link":"/Blogs/iSCSI/"},{"title":"Exploring the impact of pipeline on energy consumption","text":"Summary This article is also available in 简体中文. Analysis: Single Module Background引入k级pipeline以后(使用k-1个Reg.): Some Symbol Symbol Description Notes $P_{M,Static}$ M的静态功率 $W_{M,Dynamic}$ M的动态功耗 完成一次运算消耗的能量，暂不考虑随着频率变化而改变 $T_{M}$ M的时延 $P_{R,Static}$ Reg.的静态功率 引入一级Pipeline所需的Reg $W_{R,Dynamic}$ Reg.的动态功耗 完成一次运算消耗的能量，暂不考虑随着频率变化而改变 $T_{R}$ Reg.的时延 $PPW$ 能耗比(Performance Per Watt) 完成一次运算所需能量 时延$T_{k} = \\frac{T_{M}}{k} +T_{R}$ 静态功率 $ \\begin{aligned} P_{k,Static} & = (k-1) \\cdot P_{R,Static} + P_{M1,Static} + P_{M2,Static} +... + P_{Mk,Static} \\\\\\\\ & = (k-1) \\cdot P_{R,Static} + P_{M,Static} \\end{aligned} $ 动态功率 $ \\begin{aligned} W_{k,Dynamic} & = (k-1) \\cdot W_{R,Dynamic} + W_{M1,Dynamic} + W_{M2,Dynamic} +... + W_{Mk,Dynamic} \\\\\\\\ & = (k-1) \\cdot W_{R,Dynamic} + W_{M,Dynamic} \\end{aligned} $ 能耗比 $ \\begin{aligned} PPW &= \\frac{1}{P_{k,Static} \\cdot T_{k} + W_{k,Dynamic} } \\\\\\\\ & = \\frac{1}{[(k-1) \\cdot P_{R,Static} + P_{M,Static}]\\cdot(\\frac{T_{M}}{k} +T_{R})+ (k-1) \\cdot W_{R,Dynamic} + W_{M,Dynamic}} \\\\\\\\ & = \\frac{1}{k \\cdot (P_{R,Static}T_{R}+W_{R,Dynamic}) + \\frac{1}{k} \\cdot (P_{M,Static}T_{M}-P_{R,Static}T_{M}) - P_{R,Static}T_{R} +P_{R,Static}T_{M} +P_{M,Static}T_{R} - W_{R,Dynamic} + W_{M,Dynamic}} \\\\\\\\ & \\le \\frac{1}{ 2\\sqrt{(P_{R,Static}T_{R}+W_{R,Dynamic}) \\cdot (P_{M,Static}T_{M}-P_{R,Static}T_{M})} - P_{R,Static}T_{R} +P_{R,Static}T_{M} +P_{M,Static}T_{R} - W_{R,Dynamic} + W_{M,Dynamic}} \\\\\\\\ & when \\ and \\ only \\ when \\ \\ k= \\sqrt{\\frac{P_{M,Static}T_{M}-P_{R,Static}T_{M}}{P_{R,Static}T_{R}+W_{R,Dynamic}}} , \\ we \\ have \\ PPW_{max} \\end{aligned} $ Analysis: Multi-States Module Some Symbol Symbol Description Notes $P_{C_{mn},Static}$ $C_{mn}$的静态功率 $W_{C_{mn},Dynamic}$ $C_{mn}$的动态功耗 单个Cell完成一次运算消耗的能量，暂不考虑随着频率变化而改变 $T_{C_{mn}}$ $C_{mn}$的时延 $P_{R,Static}$ Reg.的静态功率 引入一级Pipeline所需的Reg $W_{R,Dynamic}$ Reg.的动态功耗 完成一次运算消耗的能量，暂不考虑随着频率变化而改变 $T_{R}$ Reg.的时延 $PPW$ 整个模块的能耗比(Performance Per Watt) 整个模块的完成一次运算所需能量 时延整个网络共享最大时延$T_{k} = \\frac{T_{M}}{k} +T_{R}$ 静态功率 $ \\begin{aligned} P_{k,Static} & = (k-1) \\cdot P_{R,Static} + P_{M1,Static} + P_{M2,Static} +... + P_{Mk,Static} \\\\\\\\ & = (k-1) \\cdot P_{R,Static} + P_{M,Static} \\end{aligned} $ 动态功率 $ \\begin{aligned} W_{k,Dynamic} & = (k-1) \\cdot W_{R,Dynamic} + W_{M1,Dynamic} + W_{M2,Dynamic} +... + W_{Mk,Dynamic} \\\\\\\\ & = (k-1) \\cdot W_{R,Dynamic} + W_{M,Dynamic} \\end{aligned} $ 能耗比$\\begin{aligned}PPW &amp;= \\frac{1}{\\sum_{m=1}^{M} \\sum_{n=1}^{N} (P_{m,n,k,Static} \\cdot T_{m,n,k} + W_{m,n,k,Dynamic}) }\\end{aligned}$ OutcomeTo be continue..","link":"/Blogs/Exploring-the-impact-of-pipeline-on-energy-consumption/"},{"title":"conference&#x2F;ASP-DAC&#39;22: An Essay was Accepeted","text":"\"","link":"/News/Publications-Conference-DATE'22/"},{"title":"A Precision-Scalable Energy-Efficient Bit-Split-and-Combination Vector Systolic Accelerator for NAS-Optimized DNNs on Edge","text":"SummaryTo be published","link":"/Publications/Conference-DATE'22/"},{"title":"Exploring between two type 1-d conv &amp; Concatenation","text":"Summary This article is also available in 简体中文. Background Main Idea1-D串行 1-D并行 1-D拼接 OutcomeComparation of Operations size between type1 and type2 Operations 并行 串行 乘法周期 8个 44个 加法周期 8个 44个 乘法单元 4个 1个 加法单元 4个 1个 状态机 1个 2个 寄存器阵列 3个 3个","link":"/Blogs/1D-conv/"},{"title":"conference&#x2F;ICTA’21: An Essay was Accepeted","text":"\"","link":"/News/Publications-Conference-ICTA%E2%80%9921/"},{"title":"A Fast Method for Steady-State Memristor Crossbar Array Circuit Simulation","text":"SummaryPDF","link":"/Publications/Conference-ICTA%E2%80%9921/"},{"title":"workshop&#x2F;IEEE-CASS-SSJW&#39;21","text":"SummaryIEEE Circuits and Systems Society Shanghai and Shenzhen Joint Workshop","link":"/News/workshop-IEEE-CASS-SSJW'21/"},{"title":"CPU Benchmark","text":"GeekBenchARM: wget https://cdn.geekbench.com/Geekbench-5.4.0-LinuxARMPreview.tar.gzAMD64: wget https://cdn.geekbench.com/Geekbench-5.4.0-Linux.tar.gz tar zxf Geekbench-5.4.0-Linux.tar.gz Device CPU info frq Single-Core Score Multi-Core Score N/A Xeon W2295(es) 18c36t 4.5GHz NanoPi NEO Allwinner H3 4-core Cortex-A7 1.2GHz 54 92 Davinci-MINI Atlas 200 DK 8-core ARMv8 159 578 Khadas VIM3 A311D 4-core Cortex-A73 &amp; 2-core Cortex-A53 1.8G &amp; 1.2G 347 1202 Alibaba Cloud ECS Xeon E5-2682 v4 1 Core 2.49GHz 641 640 N/A G5500 2 Core 3.80GHz 1014 1648 https://browser.geekbench.com/user/389197 计算圆周率1time echo &quot;scale=5000; 4*a(1)&quot; | bc -l -q time是计时程序。scale是精度，4a(1) 调用了反正切函数。由三角函数我们知道1的反正切是pi/4, pi=4 pi/4。 -l -q参数的意思请参照manpage。这一行其实就是让bc计算1的反正切，计算精度是5000位。有的人用tcsh作为shell的需要注意指定time工具的位置，/usr/bin/time。tcsh内部有一个内部命令time，输出格式诡异。source:Only Single Threading Device CPU Info Frq Time(5000) N/A Xeon W2295(es) 18c36t 4.50 GHz 15.956s NanoPi NEO Allwinner H3 4-core Cortex-A7 1.2GHz 118.814s Davinci-MINI Atlas 200 DK 8-core ARMv8 57.200s Khadas VIM3 A311D 4-core Cortex-A73 &amp; 2-core Cortex-A53 1.8G &amp; 1.2G 33.312s Alibaba Cloud ECS Xeon E5-2682 v4 1 Core 2.49GHz 20.40s N/A G5500 2 Core 3.80GHz 16.63s Raspberry Pi 4B BCM2835 4-core Cortex-A72 1.50 GHz 44.76s sysbench有待研究 https://github.com/akopytov/sysbench","link":"/Blogs/Benchmark/"},{"title":"Web-Setting-WiFi","text":"Raspberry Pihttps://github.com/YangXinlei/RPi_AutoWifihttps://blog.csdn.net/weixin_43928944/article/details/108266986 ESP8266WiFiManagerhttps://github.com/tzapu/WiFiManager","link":"/Blogs/Web-Setting-WiFi/"},{"title":"Video flow via SOCKET by Python","text":"To DO","link":"/Blogs/Socket-Video-Python/"},{"title":"Install-ESXI-On-MacOS","text":"Summary 烧录系统盘。使用UNetBooTIN其他方式不好使先使用传统模式进installer。后使用uefi进esxi7.0 安装系统https://www.modb.pro/db/67054https://blog.qiaohewei.cc/2020/08/02/vsphere_esxi_7-0_install/默认情况下，创建密码时，必须混合使用以下四个字符类的字符：小写字母，大写字母，数字和特殊字符，例如下划线或破折号，对于ESXi的默认密码策略，这是一项硬性要求。 默认情况下，密码长度大于7且小于40个字符。密码必须包含至少三个字符类的字符。（大写字符（AZ），小写字符（az），数字（0-9），特殊字符（〜！@ ＃$％^＆* _- + =`| \\（）{} [] :;”’&lt; &gt;，。？/）具有三个字符类字符的密码必须至少七个字符长。具有所有四个字符类别的字符的密码必须至少七个字符长。密码开头的大写字符不会计入所使用的字符类数量。以密码结尾的数字不会计入所使用的字符类数量。输入第一个密码后，按【下】键 输入确认密码。","link":"/Blogs/ESXI-On-MacOS/"},{"title":"Config-Hexo","text":"Summary 修改Recent_Post 的数量node_modules/hexo-component-inferno/lib/view/widget/recent_posts.js12345678910111213var site = props.site, helper = props.helper, _props$limit = props.limit,- limit = _props$limit === void 0 ? 5 : _props$limit;+ limit = _props$limit === void 0 ? 4 : _props$limit; var url_for = helper.url_for, __ = helper.__, date_xml = helper.date_xml, date = helper.date; if (!site.posts.length) { return null; }","link":"/Blogs/Config-Hexo/"},{"title":"Raspberry Pi wifi ssh frp","text":"下载镜像2021-03-04-raspios-buster-armhf.zip wifi自启动/boot/wpa_supplicant.conf123456789101112131415country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network={ ssid=&quot;wifi-name&quot; psk=&quot;wifi-passwd&quot; key_mgmt=WPA-PSK priority=1}network={ ssid=&quot;SUSTech-wifi&quot; key_mgmt=NONE priority=2} 123456789101112ssid:网络的ssidpsk:密码priority:连接优先级，数字越大优先级越高（不可以是负数）scan_ssid:连接隐藏WiFi时需要指定该值为1key_mgmt: list of accepted authenticated key management protocols ---支持的协议列表 WPA-PSK = WPA pre-shared key (this requires 'psk' field) ---一般都是这个，这就包括了WPA、WPA2开始的那些方式 WPA-EAP = WPA using EAP authentication ---这个就是WEP开头的，猜的，求验证 IEEE8021X = IEEE 802.1X using EAP authentication and (optionally) dynamically generated WEP keys NONE = WPA is not used; plaintext or static WEP could be used ---这个是开放的，没密码，联通、电信之类的就这个 WPA-PSK-SHA256 = Like WPA-PSK but using stronger SHA256-based algorithms WPA-EAP-SHA256 = Like WPA-EAP but using stronger SHA256-based algorithms If not set, this defaults to: WPA-PSK WPA-EAP ---如果未设置，默认支持WAP、WEP开头那些 sshssh自启动1touch /boot/ssh 找树莓派的ip方法一通过比较树莓派开机前后ping通的ip地址的不同获取 command before RaspberryPi Connect to WiFi1ping_ip_1=$(arp -a) RaspberryPi Power On &amp; Connect to WiFi command after RaspberryPi Connect to WiFi1ping_ip_2=$(arp -a) &amp;&amp; diff &lt;(echo &quot;$ping_ip_1&quot;) &lt;(echo &quot;$ping_ip_2&quot;) &amp;&amp; unset ping_ip_1 ping_ip_2 从不同的ip地址中找到树莓派的ip 方法二使用sent-ip ssh链接树莓派1ssh pi@192.168.2.169 frpfrpfrp-v0.34.2树莓派版本：frp_0.34.2_linux_arm.tar.gz 解压到/etc/frp 修改frpc.ini文件12345678910111213[common] server_addr = xx.xx.xx.xx server_port = 7000 [ssh] type = tcp local_ip = 127.0.0.1 local_port = 22 remote_port = 6000 [web1] type = http local_port = 5000 remote_port = 5000 custom_domains = xx.xx.xx.xx 自启动把systemd文件夹下的frpc.service，放到/etc/systemd/system下 12345678ln -s /etc/frp/frpc /usr/bin/frpcchmod +x /usr/bin/frpcchmod 754 systemd/frpc.servicecp systemd/frpc.service /etc/systemd/system/systemctl start frpcsystemctl enable frpcsystemctl status frpcps -ef|grep frpc 内网测速1iperf -c 192.168.1.2 1iperf -s 设置开机串口启动修改config.txt文件最后加上三行 123dtoverlay=pi3-miniuart-btstart_x=1gpu_mem=128 修改cmdline.txt文件删除rootwait之后的内容 wget https://dl.orbbec3d.com/dist/astra/v2.1.2/AstraSDK-v2.1.2-Linux-arm.zipwget https://dl.orbbec3d.com/dist/openni2/OpenNI_2.3.0.66.zip watchdog支持的是bcm2835_wdt。可以通过指令查询 1234pi@raspberrypi:~ $ sudo cat /lib/modules/$(uname -r)/modules.builtin | grep wdtkernel/drivers/watchdog/bcm2835_wdt.kopi@raspberrypi:~ $ sudo cat /var/log/kern.log* | grep watchdogJan 31 02:17:02 raspberrypi kernel: bcm2835-wdt bcm2835-wdt: Broadcom BCM2835 watchdog timer 安装生效步骤安装watchdog驱动123456pi@raspberrypi:~ $ sudo apt update[... output ...]pi@raspberrypi:~ $ sudo apt install watchdog[... output ...]pi@raspberrypi:~ $ sudo systemctl enable watchdog[... output ...] 修改配置/boot/config.txt 在后面增加一配置项 1dtparam=watchdog=on 修改配置文件/etc/watchdog.conf 里面还有温度等配置可修改 1234max-load-1 = 24watchdog-device = /dev/watchdogrealtime = yespriority = 1 重启测试是否有效，控制台中输入以下指令（会导致死机） 1:(){ :|: &amp; };:","link":"/Blogs/RaspberryPi-WiFi-SSH/"}],"tags":[{"name":"technology","slug":"technology","link":"/Tags/technology/"},{"name":"cleanroom","slug":"cleanroom","link":"/Tags/cleanroom/"},{"name":"sustech","slug":"sustech","link":"/Tags/sustech/"},{"name":"docker","slug":"docker","link":"/Tags/docker/"},{"name":"env","slug":"env","link":"/Tags/env/"},{"name":"spinalhdl","slug":"spinalhdl","link":"/Tags/spinalhdl/"},{"name":"fpga","slug":"fpga","link":"/Tags/fpga/"},{"name":"web","slug":"web","link":"/Tags/web/"},{"name":"wifi","slug":"wifi","link":"/Tags/wifi/"},{"name":"socket","slug":"socket","link":"/Tags/socket/"},{"name":"video","slug":"video","link":"/Tags/video/"},{"name":"accelerator","slug":"accelerator","link":"/Tags/accelerator/"},{"name":"rram","slug":"rram","link":"/Tags/rram/"},{"name":"eda","slug":"eda","link":"/Tags/eda/"},{"name":"riscv","slug":"riscv","link":"/Tags/riscv/"},{"name":"Accelerator","slug":"Accelerator","link":"/Tags/Accelerator/"}],"categories":[{"name":"Blogs","slug":"Blogs","link":"/Categories/Blogs/"},{"name":"1-d Conv","slug":"Blogs/1-d-Conv","link":"/Categories/Blogs/1-d-Conv/"},{"name":"sth. cool","slug":"Blogs/sth-cool","link":"/Categories/Blogs/sth-cool/"},{"name":"Homelab","slug":"Blogs/Homelab","link":"/Categories/Blogs/Homelab/"},{"name":"Technology","slug":"Blogs/Technology","link":"/Categories/Blogs/Technology/"},{"name":"pipeline","slug":"Blogs/pipeline","link":"/Categories/Blogs/pipeline/"},{"name":"SpinalHDL","slug":"Blogs/SpinalHDL","link":"/Categories/Blogs/SpinalHDL/"},{"name":"Network","slug":"Blogs/Network","link":"/Categories/Blogs/Network/"},{"name":"News","slug":"News","link":"/Categories/News/"},{"name":"Publications","slug":"Publications","link":"/Categories/Publications/"},{"name":"Publications","slug":"News/Publications","link":"/Categories/News/Publications/"},{"name":"workshop","slug":"News/workshop","link":"/Categories/News/workshop/"},{"name":"Conference","slug":"Publications/Conference","link":"/Categories/Publications/Conference/"},{"name":"Conference","slug":"News/Publications/Conference","link":"/Categories/News/Publications/Conference/"},{"name":"IEEE-CASS-SSJW","slug":"News/workshop/IEEE-CASS-SSJW","link":"/Categories/News/workshop/IEEE-CASS-SSJW/"},{"name":"ICTA","slug":"Publications/Conference/ICTA","link":"/Categories/Publications/Conference/ICTA/"},{"name":"ASP-DAC","slug":"Publications/Conference/ASP-DAC","link":"/Categories/Publications/Conference/ASP-DAC/"},{"name":"21","slug":"Publications/Conference/ICTA/21","link":"/Categories/Publications/Conference/ICTA/21/"},{"name":"22","slug":"Publications/Conference/ASP-DAC/22","link":"/Categories/Publications/Conference/ASP-DAC/22/"},{"name":"DATE","slug":"Publications/Conference/DATE","link":"/Categories/Publications/Conference/DATE/"},{"name":"Projects","slug":"Projects","link":"/Categories/Projects/"},{"name":"22","slug":"Publications/Conference/DATE/22","link":"/Categories/Publications/Conference/DATE/22/"},{"name":"Parallel-Demosaicing","slug":"Projects/Parallel-Demosaicing","link":"/Categories/Projects/Parallel-Demosaicing/"},{"name":"Pipelined-TPU","slug":"Projects/Pipelined-TPU","link":"/Categories/Projects/Pipelined-TPU/"},{"name":"Pipelined-Eyeriss","slug":"Projects/Pipelined-Eyeriss","link":"/Categories/Projects/Pipelined-Eyeriss/"}]}